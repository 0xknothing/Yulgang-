<!DOCTYPE html><html lang="th">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover" />
<title>YG Light ‚Äì Mobile Web Game UI (v5.0)</title>
<style>
/* --------------------------------------------------
   v5.0 MOBILE GAME UI (single file)
   - Fullscreen canvas map + HUD
   - Virtual joystick (left-bottom)
   - Action buttons (right-bottom)
   - Start/Stop FAB, Pause/Menu overlay (tabs)
   - Safe-area friendly, mobile-first
---------------------------------------------------*/
:root{
  --bg:#0b1020; --panel:#11172a; --accent:#3aa0ff; --accent-2:#7cf; --text:#e8efff; --muted:#9fb1d5;
  --hp:#ff5353; --mp:#59aaff; --xp:#a2ff7a; --good:#2ec27e; --bad:#ff5e57; --warn:#ffb020;
}
*{box-sizing:border-box;}
html,body{height:100%;}
body{margin:0;background:radial-gradient(1200px 800px at 50% -20%, #17233f 0%, #0b1020 50%, #06080f 100%);color:var(--text);font-family:Inter,system-ui,Segoe UI,Tahoma,Arial,sans-serif;}
#app{position:relative;min-height:100dvh;padding-bottom:calc(110px + env(safe-area-inset-bottom));}/* Canvas area */ #stage{position:relative;height:65vh;max-height:720px;min-height:360px;padding:8px;} #mapCanvas{width:100%;height:100%;display:block;background:#0e152b;border-radius:16px;box-shadow:0 8px 28px rgba(0,0,0,.35),0 0 0 1px rgba(255,255,255,.04) inset} #minimap{position:absolute;right:16px;top:16px;width:140px;height:88px;background:#0a1226;border-radius:8px;border:1px solid rgba(255,255,255,.1)} #hudTop{position:absolute;left:16px;top:16px;display:grid;gap:8px;min-width:220px} .bar{height:12px;background:#0b1328;border:1px solid rgba(255,255,255,.08);border-radius:999px;position:relative;overflow:hidden} .bar>span{position:absolute;left:0;top:0;bottom:0;border-radius:999px} .bar.hp>span{background:linear-gradient(90deg,#ff9e9e,#ff5353)} .bar.mp>span{background:linear-gradient(90deg,#a5d3ff,#59aaff)} .bar.xp>span{background:linear-gradient(90deg,#ccffb2,#a2ff7a)} #hudInfo{display:flex;gap:10px;align-items:center} .tag{font-size:12px;color:#0b1020;background:#cfe6ff;padding:2px 8px;border-radius:12px} .money{font-weight:700;color:#ffe27a}

/* Floating Controls */ #fabStart{position:absolute;right:18px;bottom:calc(18px + env(safe-area-inset-bottom));width:64px;height:64px;border-radius:50%;display:grid;place-items:center;background:linear-gradient(180deg,#24d27b,#18a55e);color:#061;box-shadow:0 10px 24px rgba(0,0,0,.35);border:0;font-size:14px;font-weight:800} #fabStart.stop{background:linear-gradient(180deg,#ff6767,#e14444);color:#300}

/* Virtual Joystick */ #joy{position:fixed;left:16px;bottom:calc(120px + env(safe-area-inset-bottom));width:140px;height:140px;border-radius:50%;background:rgba(255,255,255,.04);backdrop-filter:blur(6px);border:1px solid rgba(255,255,255,.08)} #joy .knob{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:64px;height:64px;border-radius:50%;background:rgba(255,255,255,.14);border:1px solid rgba(255,255,255,.18)}

/* Action Buttons */ #actions{position:fixed;right:16px;bottom:calc(12px + env(safe-area-inset-bottom));display:grid;grid-template-columns:repeat(3,72px);grid-auto-rows:72px;gap:10px} .abtn{border:0;border-radius:16px;background:linear-gradient(180deg,#1b2546,#0e1631);box-shadow:0 6px 16px rgba(0,0,0,.35);color:#e8efff;font-weight:800;font-size:16px;display:grid;place-items:center} .abtn:active{transform:translateY(1px)} .abtn.small{font-size:14px}

/* Bottom HUD (quick toggles) */ #bottom{position:fixed;left:0;right:0;bottom:0;padding:8px 12px calc(8px + env(safe-area-inset-bottom));display:flex;gap:10px;align-items:center;background:linear-gradient(180deg,rgba(8,12,24,.12),rgba(8,12,24,.5));backdrop-filter:blur(10px);border-top:1px solid rgba(255,255,255,.08)} .sel, .toggle{appearance:none;border:1px solid rgba(255,255,255,.12);background:#0f1631;color:#e8efff;border-radius:12px;padding:8px 10px;font-size:14px} .toggle{display:flex;gap:8px;align-items:center}

/* Menu Overlay */ #menuBtn{position:absolute;right:16px;top:16px;border:1px solid rgba(255,255,255,.12);background:#0e1631;border-radius:10px;color:#cfe6ff;padding:8px 12px} #overlay{position:fixed;inset:0;background:rgba(2,6,14,.65);backdrop-filter:blur(10px);display:none} #overlay.show{display:block} #panel{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:min(960px,92vw);max-height:82vh;overflow:auto;background:#0c132a;border:1px solid rgba(255,255,255,.08);border-radius:18px;box-shadow:0 24px 64px rgba(0,0,0,.5)} #panel .tabs{display:flex;gap:4px;padding:10px;border-bottom:1px solid rgba(255,255,255,.08);background:#0b1226;position:sticky;top:0} .tab{padding:8px 12px;border-radius:10px;border:1px solid rgba(255,255,255,.08);background:#0f1835;font-size:14px} .tab.active{background:#16224a;color:#7cf;border-color:#2b3e79} .tpage{display:none;padding:12px} .tpage.active{display:block} .table{width:100%;border-collapse:collapse;font-size:14px} .table th,.table td{border-bottom:1px solid rgba(255,255,255,.08);padding:8px;text-align:left} .badge{display:inline-block;background:#173768;color:#aee0ff;border:1px solid rgba(255,255,255,.14);border-radius:999px;padding:2px 8px;font-size:12px}

/* Utility */ .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap} .grow{flex:1} .ghost{opacity:.7}

@media (min-width:1024px){ #stage{height:72vh} } </style>

</head>
<body>
<div id="app">
  <div id="stage">
    <canvas id="mapCanvas"></canvas>
    <canvas id="minimap"></canvas>
    <div id="hudTop">
      <div class="row" id="hudInfo">
        <span class="badge">Lv <b id="lv">1</b></span>
        <span class="badge">‡∏ä‡∏∑‡πà‡∏≠ <b id="pname">-</b></span>
        <span class="badge money">Z <b id="money">0</b></span>
      </div>
      <div class="bar hp"><span id="hpbar" style="width:50%"></span></div>
      <div class="bar mp"><span id="mpbar" style="width:50%"></span></div>
      <div class="bar xp"><span id="xpbar" style="width:5%"></span></div>
    </div>
    <button id="menuBtn">‚ò∞ ‡πÄ‡∏°‡∏ô‡∏π</button>
    <button id="fabStart">START</button>
  </div>  <!-- Bottom quick controls -->  <div id="bottom">
    <select class="sel" id="server">
      <option value="r1">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏π‡∏ò‡∏£</option>
      <option value="r2">‡∏û‡∏µ‡πÄ‡∏Ñ‡πÇ‡∏´‡∏î</option>
      <option value="r3">‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</option>
    </select>
    <select class="sel" id="mapSelect"></select>
    <label class="toggle"><input type="checkbox" id="patrol"> Patrol</label>
    <label class="toggle"><input type="checkbox" id="autoSell"> Auto-Sell</label>
    <div class="grow"></div>
    <label class="toggle"><input type="checkbox" id="sfx"> üîà</label>
  </div>  <!-- Virtual joystick -->  <div id="joy"><div class="knob"></div></div>  <!-- Action buttons -->  <div id="actions">
    <button class="abtn" data-skill="1">1</button>
    <button class="abtn" data-skill="2">2</button>
    <button class="abtn" data-skill="3">3</button>
    <button class="abtn" data-skill="4">4</button>
    <button class="abtn" data-skill="5">5</button>
    <button class="abtn small" data-item="red">Q</button>
    <button class="abtn small" data-item="blue">E</button>
  </div>
</div><!-- Overlay Menu (tabs) --><div id="overlay">
  <div id="panel">
    <div class="tabs">
      <button class="tab active" data-t="t-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</button>
      <button class="tab" data-t="t-inv">‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤</button>
      <button class="tab" data-t="t-skill">‡∏™‡∏Å‡∏¥‡∏•‡∏ó‡∏£‡∏µ</button>
      <button class="tab" data-t="t-quests">‡πÄ‡∏Ñ‡∏ß‡∏™</button>
      <button class="tab" data-t="t-shop">‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</button>
      <button class="tab" data-t="t-save">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
      <div class="grow"></div>
      <button class="tab" id="btnClose">‡∏õ‡∏¥‡∏î</button>
    </div><section id="t-status" class="tpage active">
  <div class="row"><div class="badge">STR <b id="stSTR">3</b></div><div class="badge">AGI <b id="stAGI">3</b></div><div class="badge">DEX <b id="stDEX">2</b></div><div class="badge">VIT <b id="stVIT">3</b></div><div class="badge">SP <b id="spLeft">0</b></div></div>
  <div class="row" style="margin-top:8px">
    <label>Aggro</label><input type="range" min="80" max="360" value="180" id="aggro"> <span id="aggroVal" class="badge">180</span>
    <label>Loot</label><input type="range" min="20" max="200" value="80" id="loot"> <span id="lootVal" class="badge">80</span>
    <label>HP%</label><input type="range" min="5" max="90" value="35" id="hpTh"> <span id="hpThVal" class="badge">35%</span>
    <label>MP%</label><input type="range" min="0" max="80" value="20" id="mpTh"> <span id="mpThVal" class="badge">20%</span>
    <label class="toggle"><input type="checkbox" id="autoPotion" checked> Auto-Potion</label>
  </div>
</section>

<section id="t-inv" class="tpage">
  <table class="table"><thead><tr><th>#</th><th>‡πÑ‡∏≠‡πÄ‡∏ó‡∏°</th><th>‡πÅ‡∏£‡∏£‡πå</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th></tr></thead><tbody id="tblInv"></tbody></table>
</section>

<section id="t-skill" class="tpage">
  <div class="row">
    <div class="badge">Power Lv <b id="stPower">0</b> <button id="upPower">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Vitality Lv <b id="stVita">0</b> <button id="upVita">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Agility Lv <b id="stAgil">0</b> <button id="upAgil">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Crit Lv <b id="stCrit">0</b> <button id="upCrit">‡∏≠‡∏±‡∏õ</button></div>
  </div>
</section>

<section id="t-quests" class="tpage">
  <div id="questBox">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</div>
</section>

<section id="t-shop" class="tpage">
  <div class="row">
    <button id="openShop">‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô NPC ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß</button>
    <div class="badge">Zeny: <b id="shopZ">0</b></div>
  </div>
  <div class="row ghost">* ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏Å‡∏•‡πâ NPC ‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</div>
</section>

<section id="t-save" class="tpage">
  <div class="row" style="margin-bottom:8px">
    <button id="btnExport">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</button>
    <button id="btnImport">‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</button>
  </div>
  <textarea id="ioBox" rows="6" style="width:100%" placeholder='‡∏ß‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...'></textarea>
</section>

  </div>
</div><script>
/* =====================================================
   CORE GAME (ported from v3.6, UI revamped for v5.0) 
=====================================================*/
const $=(q,root=document)=>root.querySelector(q);const $$=(q,root=document)=>[...root.querySelectorAll(q)];
const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));
let audioCtx=null;function beep(freq=880,ms=90){if(!$('#sfx').checked)return;try{audioCtx=audioCtx||new (window.AudioContext||window.webkitAudioContext)();const o=audioCtx.createOscillator();const g=audioCtx.createGain();o.type='sine';o.frequency.value=freq;o.connect(g);g.connect(audioCtx.destination);g.gain.value=0.05;o.start();setTimeout(()=>o.stop(),ms)}catch(e){}}

/* ---------- Save / Profiles (single profile simplified) ---------- */
const KEY='yg_v50';
let data=JSON.parse(localStorage.getItem(KEY)||'null');
function defaults(){
  return { server:'r1', rates:{exp:1,drop:1,respawn:1},
    map:{name:'Central Valley', size:{w:1200,h:800}},
    config:{aggro:180, loot:80, hpTh:35, mpTh:20, autoPotion:true, autoSell:false, patrol:false},
    player:{id:1,name:'‡πÄ‡∏ó‡∏û‡∏ó‡∏≤‡∏á‡∏õ',lv:1,exp:0,next:100,hp:120,hpMax:120,mp:50,mpMax:50,x:200,y:220,spd:1.7,str:3,agi:3,dex:2,vit:3,crit:5,dodge:5,sp:0,buff:{atk:0,spd:0,t:0},tal:{power:0,vita:0,agil:0,crit:0}},
    mons:[], spawns:[], obstacles:[], npcs:[],
    inv:[], zeny:0, kills:0, loots:0,
    running:false, route:[], waypoints:[], tick:0
  }
}
let S=data||defaults();
const RATES={r1:{exp:1,drop:1,respawn:1}, r2:{exp:1.4,drop:1.2,respawn:0.8}, r3:{exp:2,drop:1.6,respawn:0.6}};
function save(){ localStorage.setItem(KEY, JSON.stringify(S)); }

/* ---------- Maps ---------- */
const MAPS=[
 {name:'Central Valley', size:{w:1200,h:800}, obstacles:[{x:420,y:260,w:180,h:40},{x:620,y:520,w:220,h:60},{x:240,y:540,w:100,h:160}], spawns:[{x:300,y:260,r:140},{x:700,y:220,r:160},{x:840,y:540,r:180}], npcs:[{id:1,name:'‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤',role:'Shop',x:160,y:120},{id:2,name:'‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™',role:'Quest',x:860,y:220},{id:3,name:'‡∏Ñ‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π',role:'Gate',x:400,y:640,to:'Bamboo Forest'}]},
 {name:'Bamboo Forest', size:{w:1200,h:800}, obstacles:[{x:300,y:300,w:260,h:60},{x:760,y:200,w:60,h:320},{x:520,y:560,w:260,h:60}], spawns:[{x:260,y:220,r:120},{x:860,y:260,r:160},{x:900,y:580,r:160}], npcs:[{id:4,name:'‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏µ‡πÄ‡∏´‡∏•‡πá‡∏Å',role:'Shop',x:160,y:120},{id:5,name:'‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏õ‡πà‡∏≤',role:'Gate',x:1100,y:120,to:'Desert Outpost'}]},
 {name:'Desert Outpost', size:{w:1200,h:800}, obstacles:[{x:360,y:240,w:80,h:320},{x:720,y:160,w:280,h:80}], spawns:[{x:300,y:220,r:120},{x:780,y:320,r:160},{x:980,y:560,r:160}], npcs:[{id:6,name:'‡∏û‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏á‡∏ó‡∏£‡∏≤‡∏¢',role:'Shop',x:112,y:120},{id:7,name:'‡∏ô‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',role:'Gate',x:1080,y:720,to:'Central Valley'}]}
];

/* ---------- Canvas ---------- */
const map=$('#mapCanvas'), ctx=map.getContext('2d');
const mini=$('#minimap'), mctx=mini.getContext('2d');
function resize(){ const r=$('#stage').getBoundingClientRect(); map.width=r.width-16; map.height=r.height-16; mini.width=140; mini.height=88; draw(); }
addEventListener('resize', resize); setTimeout(resize,60);

/* ---------- Grid / A* ---------- */
function buildGrid(){ const cell=20; S.grid={cell,w:Math.ceil(S.map.size.w/cell),h:Math.ceil(S.map.size.h/cell),data:new Array(Math.ceil(S.map.size.w/cell)*Math.ceil(S.map.size.h/cell)).fill(0)}; for(const o of S.obstacles){ const x0=Math.floor(o.x/cell), x1=Math.ceil((o.x+o.w)/cell); const y0=Math.floor(o.y/cell), y1=Math.ceil((o.y+o.h)/cell); for(let y=y0;y<y1;y++){ for(let x=x0;x<x1;x++){ S.grid.data[y*S.grid.w+x]=1; } } } }
const nodeKey=(x,y)=>y*S.grid.w+x; const pass=(x,y)=>x>=0&&y>=0&&x<S.grid.w&&y<S.grid.h&&S.grid.data[nodeKey(x,y)]===0;
function astar(sx,sy,tx,ty){ const cell=S.grid.cell; sx=Math.floor(sx/cell); sy=Math.floor(sy/cell); tx=Math.floor(tx/cell); ty=Math.floor(ty/cell); const open=new Set(), came={}, g={}, f={}, pq=[]; const h=(x,y)=>Math.hypot(x-tx,y-ty); const push=(x,y)=>{ const k=nodeKey(x,y); open.add(k); if(!(k in g)) g[k]=1e9; f[k]=g[k]+h(x,y); pq.push([f[k],x,y]); }; push(sx,sy); g[nodeKey(sx,sy)]=0; f[nodeKey(sx,sy)]=h(sx,sy); const dirs=[[1,0,1],[-1,0,1],[0,1,1],[0,-1,1],[1,1,Math.SQRT2],[1,-1,Math.SQRT2],[-1,1,Math.SQRT2],[-1,-1,Math.SQRT2]]; while(pq.length){ pq.sort((a,b)=>a[0]-b[0]); const [_,x,y]=pq.shift(); const k=nodeKey(x,y); if(x===tx&&y===ty){ const path=[]; let cur=k,cx=x,cy=y; while(came[cur]){ const [px,py]=came[cur]; path.push({x:(cx+0.5)*cell, y:(cy+0.5)*cell}); cx=px; cy=py; cur=nodeKey(cx,cy);} return path.reverse(); } open.delete(k); for(const[dx,dy,cost] of dirs){ const nx=x+dx, ny=y+dy; if(!pass(nx,ny)) continue; if(dx&&dy && (!pass(x+dx,y) || !pass(x,y+dy))) continue; const nk=nodeKey(nx,ny); const t=(g[k]??1e9)+cost; if(t<(g[nk]??1e9)){ came[nk]=[x,y]; g[nk]=t; f[nk]=t+h(nx,ny); pq.push([f[nk],nx,ny]); } } } return []; }
function segmentHitsRect(x1,y1,x2,y2,r){ const steps=24; for(let i=0;i<=steps;i++){ const t=i/steps; const x=x1+(x2-x1)*t; const y=y1+(y2-y1)*t; if(x>=r.x&&x<=r.x+r.w&&y>=r.y&&y<=r.y+r.h) return true; } return false; }
function needPathTo(x,y){ for(const r of S.obstacles){ if(segmentHitsRect(S.player.x,S.player.y,x,y,r)) return true; } return false; }

/* ---------- Spawns & NPCs ---------- */
function randInCircle(cx,cy,r){ const t=Math.random()*Math.PI*2; const rr=Math.sqrt(Math.random())*r; return {x:cx+Math.cos(t)*rr, y:cy+Math.sin(t)*rr}; }
function spawnMonsters(n=22){ S.mons.length=0; let id=100; for(let i=0;i<n;i++){ const s=S.spawns[~~(Math.random()*S.spawns.length)]; const pos=randInCircle(s.x,s.y,s.r); const type=['‡∏™‡πÑ‡∏•‡∏°‡πå','‡∏´‡∏°‡∏π‡∏õ‡πà‡∏≤','‡∏á‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß','‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å','‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡∏õ‡πà‡∏≤'][~~(Math.random()*5)]; const rare=Math.random()<0.12; S.mons.push({id:id++, name:type, hp:60+~~(Math.random()*70), hpMax:130, exp:(10+~~(Math.random()*10))*S.rates.exp, z:5+~~(Math.random()*15), rare, x:pos.x, y:pos.y, respawn:0}); } }

/* ---------- Inventory ---------- */
const ICON={red:'üß™',blue:'üîÆ',horn:'ü¶å',hide:'üß•',tooth:'ü¶∑',fang:'ü¶¥',gem:'üíé',ore:'‚õèÔ∏è'}; const NAME=id=>({horn:'‡πÄ‡∏Ç‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á',hide:'‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå',tooth:'‡πÄ‡∏Ç‡∏µ‡πâ‡∏¢‡∏ß‡∏™‡∏±‡πâ‡∏ô',fang:'‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏á‡∏π',red:'‡∏¢‡∏≤‡πÅ‡∏î‡∏á',blue:'‡∏¢‡∏≤‡∏ü‡πâ‡∏≤',gem:'‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏±‡∏•',ore:'‡πÅ‡∏£‡πà‡∏´‡∏¢‡∏≤‡∏ö'})[id]||id;
function addItem(id,qty,rare=false){ const it=S.inv.find(i=>i.id===id && (!!i.rare)===!!rare); if(it) it.qty+=qty; else S.inv.push({id,qty,rare}); save(); }
function useItem(id){ const it=S.inv.find(i=>i.id===id && i.qty>0); if(!it) return; if(id==='red'){ it.qty--; S.player.hp=Math.min(S.player.hpMax,S.player.hp+45); } if(id==='blue'){ it.qty--; S.player.mp=Math.min(S.player.mpMax,S.player.mp+35); } if(it.qty<=0) S.inv=S.inv.filter(i=>i.qty>0); updateHUD(); renderInv(); save(); }

/* ---------- HUD ---------- */
function updateHUD(){ $('#pname').textContent=S.player.name; $('#lv').textContent=S.player.lv; $('#money').textContent=S.zeny; $('#hpbar').style.width=(100*S.player.hp/S.player.hpMax)+'%'; $('#mpbar').style.width=(100*S.player.mp/S.player.mpMax)+'%'; $('#xpbar').style.width=(100*S.player.exp/S.player.next)+'%'; $('#aggroVal').textContent=S.config.aggro; $('#lootVal').textContent=S.config.loot; $('#hpThVal').textContent=S.config.hpTh+'%'; $('#mpThVal').textContent=S.config.mpTh+'%'; $('#stSTR').textContent=S.player.str; $('#stAGI').textContent=S.player.agi; $('#stDEX').textContent=S.player.dex; $('#stVIT').textContent=S.player.vit; $('#spLeft').textContent=S.player.sp; $('#server').value=S.server; $('#patrol').checked=S.config.patrol; $('#autoSell').checked=S.config.autoSell; $('#autoPotion').checked=S.config.autoPotion; $('#aggro').value=S.config.aggro; $('#loot').value=S.config.loot; $('#hpTh').value=S.config.hpTh; $('#mpTh').value=S.config.mpTh; $('#shopZ').textContent=S.zeny; }
function renderInv(){ const tb=$('#tblInv'); tb.innerHTML=''; S.inv.forEach((it,i)=>tb.insertAdjacentHTML('beforeend',`<tr><td>${i+1}</td><td>${ICON[it.id]||'üì¶'} ${NAME(it.id)}</td><td>${it.rare?'Rare':'Common'}</td><td>${it.qty}</td></tr>`)); }

/* ---------- Drawing ---------- */
function w2s(x,y){ return {x:x*(map.width/S.map.size.w), y:y*(map.height/S.map.size.h)}; }
function draw(){ ctx.clearRect(0,0,map.width,map.height); // bg grid
 ctx.fillStyle='#0b1226'; ctx.fillRect(0,0,map.width,map.height);
 ctx.strokeStyle='rgba(255,255,255,.05)'; ctx.beginPath(); for(let x=0;x<map.width;x+=40){ ctx.moveTo(x,0); ctx.lineTo(x,map.height);} for(let y=0;y<map.height;y+=40){ ctx.moveTo(0,y); ctx.lineTo(map.width,y);} ctx.stroke();
 // obstacles
 ctx.fillStyle='rgba(255,255,255,.06)'; for(const o of S.obstacles){ const a=w2s(o.x,o.y); const w=o.w*(map.width/S.map.size.w), h=o.h*(map.height/S.map.size.h); ctx.fillRect(a.x,a.y,w,h); }
 // spawns
 ctx.strokeStyle='rgba(82,190,128,.25)'; for(const s of S.spawns){ const a=w2s(s.x,s.y); const r=s.r*(map.width/S.map.size.w); ctx.beginPath(); ctx.arc(a.x,a.y,r,0,Math.PI*2); ctx.stroke(); }
 // route
 if(S.route.length){ ctx.strokeStyle='rgba(58,160,255,.6)'; ctx.beginPath(); let a=w2s(S.player.x,S.player.y); ctx.moveTo(a.x,a.y); for(const p of S.route){ a=w2s(p.x,p.y); ctx.lineTo(a.x,a.y);} ctx.stroke(); }
 // mons & npc
 for(const n of S.npcs){ const a=w2s(n.x,n.y); ctx.fillStyle='#b6c2ff'; ctx.beginPath(); ctx.arc(a.x,a.y,6,0,Math.PI*2); ctx.fill(); }
 for(const m of S.mons){ const a=w2s(m.x,m.y); ctx.fillStyle=m.hp>0?'#ff6b6b':'#6c7a91'; ctx.beginPath(); ctx.arc(a.x,a.y,6,0,Math.PI*2); ctx.fill(); }
 // player
 const p=w2s(S.player.x,S.player.y); ctx.fillStyle='#7cf'; ctx.beginPath(); ctx.arc(p.x,p.y,7,0,Math.PI*2); ctx.fill();
 // minimap
 const w=mini.width,h=mini.height; mctx.clearRect(0,0,w,h); mctx.fillStyle='#0b1226'; mctx.fillRect(0,0,w,h); const sx=w/S.map.size.w, sy=h/S.map.size.h; const dot=(x,y,c)=>{ mctx.fillStyle=c; mctx.fillRect(x*sx-1,y*sy-1,3,3); };
 for(const o of S.obstacles){ mctx.fillStyle='rgba(255,255,255,.08)'; mctx.fillRect(o.x*sx,o.y*sy,o.w*sx,o.h*sy); }
 for(const s of S.spawns){ mctx.strokeStyle='rgba(82,190,128,.25)'; mctx.beginPath(); mctx.arc(s.x*sx, s.y*sy, s.r*sx, 0, Math.PI*2); mctx.stroke(); }
 for(const m of S.mons) dot(m.x,m.y,'#ff6b6b'); for(const n of S.npcs) dot(n.x,n.y,'#b6c2ff'); dot(S.player.x,S.player.y,'#7cf');
}

/* ---------- AI / Combat ---------- */
const dist=(a,b)=>Math.hypot(a.x-b.x,a.y-b.y);
let target=null; let cd={p:0,b:0,d:0,h:0,w:0};
function chooseTarget(){ const p=S.player; const cand=S.mons.filter(m=>m.hp>0 && dist(p,m)<=S.config.aggro); if(!cand.length) return null; cand.sort((a,b)=>dist(p,a)-dist(p,b)); return cand[0]; }
function potionAI(){ if(!S.config.autoPotion) return; const P=S.player; if(P.hp/P.hpMax*100<=S.config.hpTh){ useItem('red'); }
 if(P.mp/P.mpMax*100<=S.config.mpTh){ useItem('blue'); } }
function attackAI(){ if(!S.running || !target) return; const P=S.player; const d=dist(P,target); if(d<=24 && target.hp>0){ if(S.tick%18===0){ const hit=75+P.dex*3; if(Math.random()*100>hit) return; const crit=Math.random()*100<=(P.crit||5); let dmg=~~(P.str+(P.buff.atk?P.str*P.buff.atk:0)+Math.random()*6); if(crit) dmg=~~(dmg*1.7); target.hp=Math.max(0,target.hp-dmg); if(target.hp<=0){ onKill(target); target.respawn=~~((600+Math.random()*300)*S.rates.respawn); target=null; } updateHUD(); } }
}
function onKill(m){ S.kills++; S.player.exp+=m.exp; S.zeny+=m.z; if(Math.random()<(0.22*S.rates.drop)){ const pool=['horn','hide','tooth','red','blue','gem']; const id=pool[~~(Math.random()*pool.length)]; addItem(id,1,id==='gem'); S.loots++; renderInv(); }
 if(S.player.exp>=S.player.next){ S.player.exp-=S.player.next; S.player.lv++; S.player.sp++; S.player.next=Math.round(S.player.next*1.25); S.player.hpMax+=12; S.player.hp=S.player.hpMax; S.player.str++; S.player.agi++; beep(1320,160); }
 save(); }

function aiRouteTo(x,y){ if(needPathTo(x,y)) S.route=astar(S.player.x,S.player.y,x,y); else S.route=[{x,y}]; }
function moveAI(dt){ if(!S.running) return; const P=S.player; // follow route
 if(S.route.length){ const wp=S.route[0]; const d=Math.hypot(wp.x-P.x,wp.y-P.y); if(d>6){ const a=Math.atan2(wp.y-P.y,wp.x-P.x); const sp=P.spd*(1+(P.buff.spd||0)); P.x+=Math.cos(a)*sp*dt; P.y+=Math.sin(a)*sp*dt; } else { S.route.shift(); } }
}

/* ---------- Skills ---------- */
function useSkillPower(){ if(cd.p>0) return; cd.p=5*60; S.player.str+=4; setTimeout(()=>S.player.str-=4,2000); beep(980,100); }
function useSkillBuff(){ if(cd.b>0) return; cd.b=22*60; S.player.buff={atk:0.25,spd:0.25,t:20*60}; beep(720,100); }
function useSkillDash(){ if(cd.d>0) return; cd.d=12*60; S.player.spd+=1.2; setTimeout(()=>S.player.spd-=1.2,2000); beep(840,90); }
function useSkillHeal(){ if(cd.h>0||S.player.mp<10) return; cd.h=10*60; S.player.mp-=10; S.player.hp=Math.min(S.player.hpMax,S.player.hp+30); updateHUD(); beep(520,100); }
function useSkillWhirl(){ if(cd.w>0||S.player.mp<12) return; cd.w=10*60; S.player.mp-=12; let hit=0; for(const m of S.mons){ if(m.hp>0 && dist(S.player,m)<=38){ const dmg=6+S.player.str+(S.player.buff.atk?S.player.str*S.player.buff.atk:0); m.hp=Math.max(0,m.hp-~~(dmg)); hit++; if(m.hp<=0) onKill(m); } } if(hit) beep(460,90); updateHUD(); }

/* ---------- Joystick ---------- */
const joy=$('#joy'), knob=$('#joy .knob');
let joyActive=false, jox=0, joyv={x:0,y:0}; const JR=64, KR=30;
joy.addEventListener('pointerdown',e=>{joyActive=true; const r=joy.getBoundingClientRect(); jox={cx:r.left+r.width/2, cy:r.top+r.height/2}; moveKnob(e.clientX,e.clientY);});
addEventListener('pointermove',e=>{ if(!joyActive) return; moveKnob(e.clientX,e.clientY); });
addEventListener('pointerup',()=>{ if(joyActive){ joyActive=false; knob.style.left='50%'; knob.style.top='50%'; joyv={x:0,y:0}; } });
function moveKnob(x,y){ const dx=x-jox.cx, dy=y-jox.cy; const d=Math.hypot(dx,dy); const a=Math.atan2(dy,dx); const r=Math.min(JR-10,d); const kx=Math.cos(a)*r, ky=Math.sin(a)*r; knob.style.left=(50+kx/JR*50)+'%'; knob.style.top=(50+ky/JR*50)+'%'; joyv={x:dx, y:dy}; S.running=false; // manual control when joystick is active
}

/* ---------- Input: tap to move, actions, hotkeys ---------- */
map.addEventListener('pointerdown',e=>{ const r=map.getBoundingClientRect(); const x=(e.clientX-r.left)*(S.map.size.w/map.width); const y=(e.clientY-r.top)*(S.map.size.h/map.height); aiRouteTo(x,y); beep(600,70); });
$('#actions').addEventListener('click',e=>{ const sk=e.target?.dataset?.skill; if(sk){ if(sk==='1')useSkillPower(); if(sk==='2')useSkillBuff(); if(sk==='3')useSkillDash(); if(sk==='4')useSkillHeal(); if(sk==='5')useSkillWhirl(); }
 const it=e.target?.dataset?.item; if(it){ useItem(it); }
});
addEventListener('keydown',e=>{ if(['INPUT','TEXTAREA'].includes(document.activeElement.tagName))return; const k=e.key.toLowerCase(); if(k==='1')useSkillPower(); if(k==='2')useSkillBuff(); if(k==='3')useSkillDash(); if(k==='4')useSkillHeal(); if(k==='5')useSkillWhirl(); if(k==='q')useItem('red'); if(k==='e')useItem('blue'); });

/* ---------- Overlay Menu ---------- */
$('#menuBtn').onclick=()=>$('#overlay').classList.add('show');
$('#btnClose').onclick=()=>$('#overlay').classList.remove('show');
$$('#panel .tab').forEach(b=>b.onclick=()=>{ if(b.id==='btnClose')return; const id=b.dataset.t; $$('#panel .tab').forEach(x=>x.classList.toggle('active',x===b)); $$('#panel .tpage').forEach(p=>p.classList.toggle('active', p.id===id)); });

/* ---------- Controls (bottom + menu) ---------- */
$('#server').onchange=e=>{ S.server=e.target.value; S.rates=RATES[S.server]; save(); };
$('#mapSelect').onchange=e=>loadMap(e.target.value);
$('#patrol').onchange=e=>{ S.config.patrol=e.target.checked; save(); };
$('#autoSell').onchange=e=>{ S.config.autoSell=e.target.checked; save(); };
$('#autoPotion').onchange=e=>{ S.config.autoPotion=e.target.checked; save(); };
$('#aggro').oninput=e=>{ S.config.aggro=+e.target.value; updateHUD(); save(); };
$('#loot').oninput=e=>{ S.config.loot=+e.target.value; updateHUD(); save(); };
$('#hpTh').oninput=e=>{ S.config.hpTh=+e.target.value; updateHUD(); save(); };
$('#mpTh').oninput=e=>{ S.config.mpTh=+e.target.value; updateHUD(); save(); };
$('#btnExport').onclick=()=>{ $('#ioBox').value=JSON.stringify(S,null,2); };
$('#btnImport').onclick=()=>{ try{ const obj=JSON.parse($('#ioBox').value||'{}'); S=obj; save(); location.reload(); }catch(e){ alert('JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'); } };

/* ---------- Shop (shortcut) ---------- */
$('#openShop').onclick=()=>{ const near=S.npcs.find(n=>Math.hypot(S.player.x-n.x,S.player.y-n.y)<28 && n.role==='Shop'); if(near){ // simple buy one potion example
 addItem('red',1,false); S.zeny=Math.max(0,S.zeny-12); renderInv(); updateHUD(); } else { alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤'); }
};

/* ---------- Start/Stop ---------- */
const fab=$('#fabStart'); fab.onclick=()=>{ S.running=!S.running; fab.classList.toggle('stop',S.running); fab.textContent=S.running?'STOP':'START'; beep(S.running?900:360,80); };

/* ---------- Loop ---------- */
let last=performance.now();
function loop(t){ const dt=Math.min(33,t-last)/16.67; last=t; // Manual joystick move
 if(joyActive && (Math.abs(joyv.x)>4||Math.abs(joyv.y)>4)){ const a=Math.atan2(joyv.y,joyv.x); const sp=S.player.spd*(1+(S.player.buff.spd||0)); S.player.x=clamp(S.player.x+Math.cos(a)*sp*dt, 8, S.map.size.w-8); S.player.y=clamp(S.player.y+Math.sin(a)*sp*dt, 8, S.map.size.h-8); }
 // AI
 S.tick++; if(!target || target.hp<=0){ if(!(S.tick%20)) target=chooseTarget(); }
 moveAI(dt); potionAI(); attackAI();
 // Respawn
 for(const m of S.mons){ if(m.hp<=0 && m.respawn>0){ m.respawn--; if(m.respawn===0){ const s=S.spawns[~~(Math.random()*S.spawns.length)]; const pos=randInCircle(s.x,s.y,s.r); Object.assign(m,{x:pos.x,y:pos.y,hp:m.hpMax}); } } }
 // Buff timer & cooldown
 if(S.player.buff.t>0) S.player.buff.t--; if(cd.p>0)cd.p--; if(cd.b>0)cd.b--; if(cd.d>0)cd.d--; if(cd.h>0)cd.h--; if(cd.w>0)cd.w--;
 draw(); updateHUD(); requestAnimationFrame(loop); }

/* ---------- Init ---------- */
function populate(){ const sel=$('#mapSelect'); sel.innerHTML=''; MAPS.forEach(m=>{ const o=document.createElement('option'); o.textContent=m.name; sel.appendChild(o); }); sel.value=S.map.name; $('#server').value=S.server; }
function loadMap(name){ const m=MAPS.find(x=>x.name===name)||MAPS[0]; S.map={name:m.name,size:m.size}; S.obstacles=structuredClone(m.obstacles); S.spawns=structuredClone(m.spawns); S.npcs=structuredClone(m.npcs); spawnMonsters(22); buildGrid(); save(); draw(); }
function init(){ if(!S.rates) S.rates=RATES[S.server]; populate(); loadMap(S.map.name); renderInv(); updateHUD(); requestAnimationFrame(loop); }
init();
</script></body>
</html>
