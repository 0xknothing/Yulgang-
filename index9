<!DOCTYPE html><html lang="th">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover" />
<title>YG Light ‚Äì Mobile Web Game UI (v5.5)</title>
<style>
/* --- keep existing styles (trimmed in this diff) --- */
</style>
</head>
<body>
<div id="app">
  <div id="stage">
    <canvas id="mapCanvas"></canvas>
    <canvas id="minimap"></canvas>
    <div id="hudTop">
      <div class="row" id="hudInfo">
        <span class="badge">Lv <b id="lv">1</b></span>
        <span class="badge">‡∏ä‡∏∑‡πà‡∏≠ <b id="pname">-</b></span>
        <span class="badge money">Z <b id="money">0</b></span>
      </div>
      <div class="bar hp"><span id="hpbar" style="width:50%"></span></div>
      <div class="bar mp"><span id="mpbar" style="width:50%"></span></div>
      <div class="bar xp"><span id="xpbar" style="width:5%"></span></div>
    </div>
    <button id="menuBtn">‚ò∞ ‡πÄ‡∏°‡∏ô‡∏π</button>
    <button id="skinBtn" style="position:absolute;right:96px;top:16px">üé® ‡∏™‡∏Å‡∏¥‡∏ô</button>
    <button id="fabStart">START</button>
  </div>  <div id="bottom">
    <select class="sel" id="server">
      <option value="r1">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏π‡∏ò‡∏£</option>
      <option value="r2">‡∏û‡∏µ‡πÄ‡∏Ñ‡πÇ‡∏´‡∏î</option>
      <option value="r3">‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</option>
    </select>
    <select class="sel" id="mapSelect"></select>
    <label class="toggle"><input type="checkbox" id="patrol"> Patrol</label>
    <label class="toggle"><input type="checkbox" id="autoSell"> Auto-Sell</label>
    <div class="grow"></div>
    <label class="toggle"><input type="checkbox" id="sfx"> üîà</label>
    <label class="toggle"><input type="file" id="mapImage" accept="image/*"> ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà</label>
  </div>  <div id="joy"><div class="knob"></div></div>  <div id="actions">
    <button class="abtn" data-skill="1">1</button>
    <button class="abtn" data-skill="2">2</button>
    <button class="abtn" data-skill="3">3</button>
    <button class="abtn" data-skill="4">4</button>
    <button class="abtn" data-skill="5">5</button>
    <button class="abtn small" data-item="red">Q</button>
    <button class="abtn small" data-item="blue">E</button>
  </div>
</div><div id="overlay">
  <div id="panel">
    <div class="tabs">
      <button class="tab active" data-t="t-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</button>
      <button class="tab" data-t="t-inv">‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤</button>
      <button class="tab" data-t="t-skill">‡∏™‡∏Å‡∏¥‡∏•‡∏ó‡∏£‡∏µ</button>
      <button class="tab" data-t="t-quests">‡πÄ‡∏Ñ‡∏ß‡∏™</button>
      <button class="tab" data-t="t-shop">‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</button>
      <button class="tab" data-t="t-save">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
      <button class="tab" data-t="t-assets">‡πÅ‡∏≠‡∏™‡πÄ‡∏ã‡πá‡∏ï</button>
      <div class="grow"></div>
      <button class="tab" id="btnClose">‡∏õ‡∏¥‡∏î</button>
    </div><section id="t-status" class="tpage active">
  <div class="row"><div class="badge">STR <b id="stSTR">3</b></div><div class="badge">AGI <b id="stAGI">3</b></div><div class="badge">DEX <b id="stDEX">2</b></div><div class="badge">VIT <b id="stVIT">3</b></div><div class="badge">SP <b id="spLeft">0</b></div></div>
  <div class="row" style="margin-top:8px">
    <label>Aggro</label><input type="range" min="80" max="360" value="180" id="aggro"> <span id="aggroVal" class="badge">180</span>
    <label>Loot</label><input type="range" min="20" max="200" value="80" id="loot"> <span id="lootVal" class="badge">80</span>
    <label>HP%</label><input type="range" min="5" max="90" value="35" id="hpTh"> <span id="hpThVal" class="badge">35%</span>
    <label>MP%</label><input type="range" min="0" max="80" value="20" id="mpTh"> <span id="mpThVal" class="badge">20%</span>
    <label class="toggle"><input type="checkbox" id="autoPotion" checked> Auto-Potion</label>
  </div>
</section>

<section id="t-inv" class="tpage">
  <table class="table"><thead><tr><th>#</th><th>‡πÑ‡∏≠‡πÄ‡∏ó‡∏°</th><th>‡πÅ‡∏£‡∏£‡πå</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th></tr></thead><tbody id="tblInv"></tbody></table>
</section>

<section id="t-skill" class="tpage">
  <div class="row">
    <div class="badge">Power Lv <b id="stPower">0</b> <button id="upPower">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Vitality Lv <b id="stVita">0</b> <button id="upVita">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Agility Lv <b id="stAgil">0</b> <button id="upAgil">‡∏≠‡∏±‡∏õ</button></div>
    <div class="badge">Crit Lv <b id="stCrit">0</b> <button id="upCrit">‡∏≠‡∏±‡∏õ</button></div>
  </div>
</section>

<section id="t-quests" class="tpage">
  <div id="questBox">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</div>
</section>

<section id="t-shop" class="tpage">
  <div class="row">
    <button id="openShop">‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô NPC ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß</button>
    <div class="badge">Zeny: <b id="shopZ">0</b></div>
  </div>
  <div class="row ghost">* ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏Å‡∏•‡πâ NPC ‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</div>
</section>

<section id="t-save" class="tpage">
  <div class="row" style="margin-bottom:8px">
    <button id="btnExport">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</button>
    <button id="btnImport">‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</button>
  </div>
  <textarea id="ioBox" rows="6" style="width:100%" placeholder='‡∏ß‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...'></textarea>
</section>

<section id="t-assets" class="tpage">
  <p>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö <b>Data‚ÄëDriven</b> ‡πÉ‡∏ä‡πâ JSON ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏°‡∏û/‡∏°‡∏≠‡∏ô/NPC ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
  <pre id="schema" style="white-space:pre-wrap;background:#0a1226;padding:8px;border-radius:8px"></pre>
</section>

  </div>
</div><script>
/* =================== v5.5: Refactor to Modules ===================
   - Game: state & save         - Assets: maps, schema, texture
   - Systems: render, ai, inv   - UI: overlay, inputs, skins
================================================================= */
const $=(q,root=document)=>root.querySelector(q);const $$=(q,root=document)=>[...root.querySelectorAll(q)];
const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));

// ---- Event Bus ----
const Bus=(()=>{const m={};return{on:(t,f)=>(m[t]=m[t]||[],m[t].push(f)),emit:(t,p)=>{(m[t]||[]).forEach(f=>f(p))}}})();

// ---- Audio ----
let audioCtx=null;function beep(freq=880,ms=90){if(!$('#sfx').checked)return;try{audioCtx=audioCtx||new (window.AudioContext||window.webkitAudioContext)();const o=audioCtx.createOscillator();const g=audioCtx.createGain();o.type='sine';o.frequency.value=freq;o.connect(g);g.connect(audioCtx.destination);g.gain.value=0.05;o.start();setTimeout(()=>o.stop(),ms)}catch(_){} }

// ---- Assets (maps/texture/schema) ----
const Assets=(()=>{
  const RATES={r1:{exp:1,drop:1,respawn:1}, r2:{exp:1.4,drop:1.2,respawn:0.8}, r3:{exp:2,drop:1.6,respawn:0.6}};
  const MAPS=[
    {name:'Central Valley', size:{w:1200,h:800},
     obstacles:[{x:420,y:260,w:180,h:40},{x:620,y:520,w:220,h:60},{x:240,y:540,w:100,h:160}],
     spawns:[{x:300,y:260,r:140},{x:700,y:220,r:160},{x:840,y:540,r:180}],
     npcs:[{id:1,name:'‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤',role:'Shop',x:160,y:120},{id:2,name:'‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™',role:'Quest',x:860,y:220},{id:3,name:'‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏õ‡πà‡∏≤‡πÑ‡∏ú‡πà',role:'Gate',x:400,y:640,to:'Bamboo Forest'}],
     texture:null},
    {name:'Bamboo Forest', size:{w:1200,h:800}, obstacles:[{x:300,y:300,w:260,h:60},{x:760,y:200,w:60,h:320},{x:520,y:560,w:260,h:60}], spawns:[{x:260,y:220,r:120},{x:860,y:260,r:160},{x:900,y:580,r:160}], npcs:[{id:4,name:'‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏µ‡πÄ‡∏´‡∏•‡πá‡∏Å',role:'Shop',x:160,y:120},{id:5,name:'‡πÑ‡∏õ‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢',role:'Gate',x:1100,y:120,to:'Desert Outpost'}], texture:null},
    {name:'Desert Outpost', size:{w:1200,h:800}, obstacles:[{x:360,y:240,w:80,h:320},{x:720,y:160,w:280,h:80}], spawns:[{x:300,y:220,r:120},{x:780,y:320,r:160},{x:980,y:560,r:160}], npcs:[{id:6,name:'‡∏û‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏á‡∏ó‡∏£‡∏≤‡∏¢',role:'Shop',x:112,y:120},{id:7,name:'‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤',role:'Gate',x:1080,y:720,to:'Central Valley'}], texture:null}
  ];
  const SCHEMA={
    map:{name:'string', size:{w:'number',h:'number'}, texture:'image|url|null', obstacles:'Rect[]', spawns:'Circle[]', npcs:'NPC[]'},
    NPC:{id:'number',name:'string',role:'Shop|Quest|Gate|Storage',x:'number',y:'number',to:'string?'}
  };
  let textureImg=null; // current map texture
  function setTexture(img){ textureImg=img; Bus.emit('texture',img); }
  function getTexture(){ return textureImg; }
  return{RATES,MAPS,SCHEMA,setTexture,getTexture};
})();

// ---- Game State ----
const Game=(()=>{
  const KEY='yg_v55';
  function defaults(){return{server:'r1',rates:Assets.RATES.r1,map:Assets.MAPS[0],player:{id:1,name:'‡πÄ‡∏ó‡∏û‡∏ó‡∏≤‡∏á‡∏õ',lv:1,exp:0,next:100,hp:120,hpMax:120,mp:50,mpMax:50,x:200,y:220,spd:1.7,str:3,agi:3,dex:2,vit:3,crit:5,dodge:5,sp:0,buff:{atk:0,spd:0,t:0},tal:{power:0,vita:0,agil:0,crit:0}},mons:[],spawns:[],obstacles:[],npcs:[],grid:null,inv:[],zeny:0,kills:0,loots:0,running:false,route:[],tick:0,ui:{skin:'mobile'}}}
  let S=JSON.parse(localStorage.getItem(KEY)||'null')||defaults();
  function save(){localStorage.setItem(KEY,JSON.stringify(S))}
  function loadMap(name){const m=Assets.MAPS.find(x=>x.name===name)||Assets.MAPS[0];S.map={...m};S.obstacles=structuredClone(m.obstacles);S.spawns=structuredClone(m.spawns);S.npcs=structuredClone(m.npcs);Systems.spawnMonsters(22);Systems.buildGrid();save();Bus.emit('map',S.map)}
  return{S,save,loadMap,defaults}
})();

// ---- Systems (render, grid, ai, inv) ----
const Systems=(()=>{
  const map=$('#mapCanvas'), ctx=map.getContext('2d');
  const mini=$('#minimap'), mctx=mini.getContext('2d');
  function resize(){const r=$('#stage').getBoundingClientRect();map.width=r.width-16;map.height=r.height-16;mini.width=140;mini.height=88;draw()} addEventListener('resize',resize); setTimeout(resize,60);
  function buildGrid(){const cell=20;const {map:mp,obstacles}=Game.S;const w=Math.ceil(mp.size.w/cell),h=Math.ceil(mp.size.h/cell);const g=new Array(w*h).fill(0);for(const o of obstacles){const x0=Math.floor(o.x/cell),x1=Math.ceil((o.x+o.w)/cell);const y0=Math.floor(o.y/cell),y1=Math.ceil((o.y+o.h)/cell);for(let y=y0;y<y1;y++)for(let x=x0;x<x1;x++)g[y*w+x]=1}Game.S.grid={cell,w,h,data:g}}
  const nodeKey=(x,y)=>y*Game.S.grid.w+x;const pass=(x,y)=>x>=0&&y>=0&&x<Game.S.grid.w&&y<Game.S.grid.h&&Game.S.grid.data[nodeKey(x,y)]===0;function segmentHitsRect(x1,y1,x2,y2,r){const steps=24;for(let i=0;i<=steps;i++){const t=i/steps,x=x1+(x2-x1)*t,y=y1+(y2-y1)*t;if(x>=r.x&&x<=r.x+r.w&&y>=r.y&&y<=r.y+r.h)return true}return false}
  function needPathTo(x,y){for(const r of Game.S.obstacles){if(segmentHitsRect(Game.S.player.x,Game.S.player.y,x,y,r))return true}return false}
  function astar(sx,sy,tx,ty){const cell=Game.S.grid.cell;sx=Math.floor(sx/cell);sy=Math.floor(sy/cell);tx=Math.floor(tx/cell);ty=Math.floor(ty/cell);const open=new Set(),came={},g={},f={},pq=[];const h=(x,y)=>Math.hypot(x-tx,y-ty);const push=(x,y)=>{const k=nodeKey(x,y);open.add(k);if(!(k in g))g[k]=1e9;f[k]=g[k]+h(x,y);pq.push([f[k],x,y])};push(sx,sy);g[nodeKey(sx,sy)]=0;f[nodeKey(sx,sy)]=h(sx,sy);const dirs=[[1,0,1],[-1,0,1],[0,1,1],[0,-1,1],[1,1,Math.SQRT2],[1,-1,Math.SQRT2],[-1,1,Math.SQRT2],[-1,-1,Math.SQRT2]];while(pq.length){pq.sort((a,b)=>a[0]-b[0]);const[_,x,y]=pq.shift();const k=nodeKey(x,y);if(x===tx&&y===ty){const path=[];let cur=k,cx=x,cy=y;while(came[cur]){const[px,py]=came[cur];path.push({x:(cx+0.5)*cell,y:(cy+0.5)*cell});cx=px;cy=py;cur=nodeKey(cx,cy)}return path.reverse()}open.delete(k);for(const[dx,dy,cost]of dirs){const nx=x+dx,ny=y+dy;if(!pass(nx,ny))continue;if(dx&&dy&&(!pass(x+dx,y)||!pass(x,y+dy)))continue;const nk=nodeKey(nx,ny);const t=(g[k]??1e9)+cost;if(t<(g[nk]??1e9)){came[nk]=[x,y];g[nk]=t;f[nk]=t+h(nx,ny);pq.push([f[nk],nx,ny])}}}return[]}
  function aiRouteTo(x,y){Game.S.route=needPathTo(x,y)?astar(Game.S.player.x,Game.S.player.y,x,y):[{x,y}]}
  function randInCircle(cx,cy,r){const t=Math.random()*Math.PI*2;const rr=Math.sqrt(Math.random())*r;return{x:cx+Math.cos(t)*rr,y:cy+Math.sin(t)*rr}}
  function spawnMonsters(n=22){Game.S.mons.length=0;let id=100;for(let i=0;i<n;i++){const s=Game.S.spawns[~~(Math.random()*Game.S.spawns.length)];const pos=randInCircle(s.x,s.y,s.r);const type=['‡∏™‡πÑ‡∏•‡∏°‡πå','‡∏´‡∏°‡∏π‡∏õ‡πà‡∏≤','‡∏á‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß','‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å','‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡∏õ‡πà‡∏≤'][~~(Math.random()*5)];const rare=Math.random()<0.12;Game.S.mons.push({id:id++,name:type,hp:60+~~(Math.random()*70),hpMax:130,exp:(10+~~(Math.random()*10))*Game.S.rates.exp,z:5+~~(Math.random()*15),rare,x:pos.x,y:pos.y,respawn:0})}} 
  function draw(){const S=Game.S;ctx.clearRect(0,0,map.width,map.height); // texture
   const tex=Assets.getTexture(); if(tex){ const sx=map.width/S.map.size.w, sy=map.height/S.map.size.h; ctx.drawImage(tex,0,0,tex.width,tex.height,0,0,map.width,map.height);} else { ctx.fillStyle='#0b1226'; ctx.fillRect(0,0,map.width,map.height); ctx.strokeStyle='rgba(255,255,255,.05)'; ctx.beginPath(); for(let x=0;x<map.width;x+=40){ctx.moveTo(x,0);ctx.lineTo(x,map.height)} for(let y=0;y<map.height;y+=40){ctx.moveTo(0,y);ctx.lineTo(map.width,y)} ctx.stroke(); }
   // obstacles/spawns
   ctx.fillStyle='rgba(255,255,255,.06)'; for(const o of S.obstacles){const a=w2s(o.x,o.y);const w=o.w*(map.width/S.map.size.w),h=o.h*(map.height/S.map.size.h);ctx.fillRect(a.x,a.y,w,h)}
   ctx.strokeStyle='rgba(82,190,128,.25)'; for(const sp of S.spawns){const a=w2s(sp.x,sp.y);const r=sp.r*(map.width/S.map.size.w);ctx.beginPath();ctx.arc(a.x,a.y,r,0,Math.PI*2);ctx.stroke()}
   // route
   if(S.route.length){ctx.strokeStyle='rgba(58,160,255,.6)';ctx.beginPath();let a=w2s(S.player.x,S.player.y);ctx.moveTo(a.x,a.y);for(const p of S.route){a=w2s(p.x,p.y);ctx.lineTo(a.x,a.y)}ctx.stroke()}
   // npc/mon/player
   for(const n of S.npcs){const a=w2s(n.x,n.y);ctx.fillStyle='#b6c2ff';ctx.beginPath();ctx.arc(a.x,a.y,6,0,Math.PI*2);ctx.fill()}
   for(const m of S.mons){const a=w2s(m.x,m.y);ctx.fillStyle=m.hp>0?'#ff6b6b':'#6c7a91';ctx.beginPath();ctx.arc(a.x,a.y,6,0,Math.PI*2);ctx.fill()}
   const p=w2s(S.player.x,S.player.y);ctx.fillStyle='#7cf';ctx.beginPath();ctx.arc(p.x,p.y,7,0,Math.PI*2);ctx.fill();
   // minimap
   const w=mini.width,h=mini.height;sx=w/S.map.size.w,sy=h/S.map.size.h;mctx.clearRect(0,0,w,h); if(tex){mctx.drawImage(tex,0,0,tex.width,tex.height,0,0,w,h)} else {mctx.fillStyle='#0b1226';mctx.fillRect(0,0,w,h)}
   const dot=(x,y,c)=>{mctx.fillStyle=c;mctx.fillRect(x*sx-1,y*sy-1,3,3)};for(const o of S.obstacles){mctx.fillStyle='rgba(255,255,255,.08)';mctx.fillRect(o.x*sx,o.y*sy,o.w*sx,o.h*sy)}for(const s of S.spawns){mctx.strokeStyle='rgba(82,190,128,.25)';mctx.beginPath();mctx.arc(s.x*sx,s.y*sy,s.r*sx,0,Math.PI*2);mctx.stroke()}for(const m of S.mons)dot(m.x,m.y,'#ff6b6b');for(const n of S.npcs)dot(n.x,n.y,'#b6c2ff');dot(S.player.x,S.player.y,'#7cf')}
  function w2s(x,y){return{x:x*(map.width/Game.S.map.size.w),y:y*(map.height/Game.S.map.size.h)}}
  return{resize,buildGrid,astar,aiRouteTo,spawnMonsters,draw}
})();

// ---- UI (overlay, inputs, skins, loaders) ----
const UI=(()=>{
  const S=Game.S; const ICON={red:'üß™',blue:'üîÆ',horn:'ü¶å',hide:'üß•',tooth:'ü¶∑',fang:'ü¶¥',gem:'üíé',ore:'‚õèÔ∏è'}; const NAME=id=>({horn:'‡πÄ‡∏Ç‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á',hide:'‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå',tooth:'‡πÄ‡∏Ç‡∏µ‡πâ‡∏¢‡∏ß‡∏™‡∏±‡πâ‡∏ô',fang:'‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏á‡∏π',red:'‡∏¢‡∏≤‡πÅ‡∏î‡∏á',blue:'‡∏¢‡∏≤‡∏ü‡πâ‡∏≤',gem:'‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏±‡∏•',ore:'‡πÅ‡∏£‡πà‡∏´‡∏¢‡∏≤‡∏ö'})[id]||id;
  function updateHUD(){ $('#pname').textContent=S.player.name; $('#lv').textContent=S.player.lv; $('#money').textContent=S.zeny; $('#hpbar').style.width=(100*S.player.hp/S.player.hpMax)+'%'; $('#mpbar').style.width=(100*S.player.mp/S.player.mpMax)+'%'; $('#xpbar').style.width=(100*S.player.exp/S.player.next)+'%'; $('#server').value=S.server; $('#patrol').checked=S.config.patrol; $('#autoSell').checked=S.config.autoSell; $('#autoPotion').checked=S.config.autoPotion; $('#aggro').value=S.config.aggro; $('#loot').value=S.config.loot; $('#hpTh').value=S.config.hpTh; $('#mpTh').value=S.config.mpTh; $('#aggroVal').textContent=S.config.aggro; $('#lootVal').textContent=S.config.loot; $('#hpThVal').textContent=S.config.hpTh+'%'; $('#mpThVal').textContent=S.config.mpTh+'%'; $('#shopZ').textContent=S.zeny; }
  function renderInv(){ const tb=$('#tblInv'); tb.innerHTML=''; S.inv.forEach((it,i)=>tb.insertAdjacentHTML('beforeend',`<tr><td>${i+1}</td><td>${ICON[it.id]||'üì¶'} ${NAME(it.id)}</td><td>${it.rare?'Rare':'Common'}</td><td>${it.qty}</td></tr>`)); }
  function populate(){ const sel=$('#mapSelect'); sel.innerHTML=''; Assets.MAPS.forEach(m=>{ const o=document.createElement('option'); o.textContent=m.name; sel.appendChild(o);}); sel.value=S.map.name; $('#schema').textContent=JSON.stringify(Assets.SCHEMA,null,2); }
  function bind(){ $('#menuBtn').onclick=()=>$('#overlay').classList.add('show'); $('#btnClose').onclick=()=>$('#overlay').classList.remove('show'); $$('#panel .tab').forEach(b=>b.onclick=()=>{ if(b.id==='btnClose')return; const id=b.dataset.t; $$('#panel .tab').forEach(x=>x.classList.toggle('active',x===b)); $$('#panel .tpage').forEach(p=>p.classList.toggle('active',p.id===id)); });
    // selectors
    $('#server').onchange=e=>{S.server=e.target.value;S.rates=Assets.RATES[S.server];Game.save()}; $('#mapSelect').onchange=e=>Game.loadMap(e.target.value); $('#patrol').onchange=e=>{S.config.patrol=e.target.checked;Game.save()}; $('#autoSell').onchange=e=>{S.config.autoSell=e.target.checked;Game.save()}; $('#autoPotion').onchange=e=>{S.config.autoPotion=e.target.checked;Game.save()};
    ['aggro','loot','hpTh','mpTh'].forEach(id=>{$('#'+id).oninput=()=>{S.config[id==='aggro'?'aggro':id==='loot'?'loot':id==='hpTh'?'hpTh':'mpTh']=+$('#'+id).value;updateHUD();Game.save()}});
    $('#btnExport').onclick=()=>$('#ioBox').value=JSON.stringify(S,null,2); $('#btnImport').onclick=()=>{try{const obj=JSON.parse($('#ioBox').value||'{}');Object.assign(S,obj);Game.save();location.reload()}catch(e){alert('JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')}};
    // map image loader
    $('#mapImage').onchange=e=>{const file=e.target.files?.[0];if(!file)return;const img=new Image();img.onload=()=>{Assets.setTexture(img); Systems.draw()}; img.src=URL.createObjectURL(file)};
    // skin toggle
    $('#skinBtn').onclick=()=>{ S.ui.skin = S.ui.skin==='mobile' ? 'classic' : 'mobile'; document.body.dataset.skin=S.ui.skin; Game.save(); };
  }
  return{updateHUD,renderInv,populate,bind}
})();

// ---- Controls & Loop ----
const Controls=(()=>{
  const S=Game.S; const map=$('#mapCanvas'); const fab=$('#fabStart'); const joy=$('#joy'), knob=$('#joy .knob');
  let joyActive=false, jox=0, joyv={x:0,y:0};
  map.addEventListener('pointerdown',e=>{const r=map.getBoundingClientRect();const x=(e.clientX-r.left)*(S.map.size.w/map.width);const y=(e.clientY-r.top)*(S.map.size.h/map.height);Systems.aiRouteTo(x,y);beep(600,70)});
  $('#actions').addEventListener('click',e=>{const k=e.target?.dataset?.skill; if(k){ if(k==='1')Skills.power(); if(k==='2')Skills.buff(); if(k==='3')Skills.dash(); if(k==='4')Skills.heal(); if(k==='5')Skills.whirl(); } const it=e.target?.dataset?.item; if(it) Items.use(it);});
  addEventListener('keydown',e=>{if(['INPUT','TEXTAREA'].includes(document.activeElement.tagName))return;const k=e.key.toLowerCase();if(k==='1')Skills.power();if(k==='2')Skills.buff();if(k==='3')Skills.dash();if(k==='4')Skills.heal();if(k==='5')Skills.whirl();if(k==='q')Items.use('red');if(k==='e')Items.use('blue')});
  fab.onclick=()=>{S.running=!S.running;fab.classList.toggle('stop',S.running);fab.textContent=S.running?'STOP':'START';beep(S.running?900:360,80)};
  // joystick
  joy.addEventListener('pointerdown',e=>{joyActive=true;const r=joy.getBoundingClientRect();jox={cx:r.left+r.width/2,cy:r.top+r.height/2};move(e.clientX,e.clientY)}); addEventListener('pointermove',e=>{if(!joyActive)return;move(e.clientX,e.clientY)}); addEventListener('pointerup',()=>{if(joyActive){joyActive=false;knob.style.left='50%';knob.style.top='50%';joyv={x:0,y:0}}});
  function move(x,y){const dx=x-jox.cx,dy=y-jox.cy;const JR=64;const d=Math.min(JR-10,Math.hypot(dx,dy));const a=Math.atan2(dy,dx);const kx=Math.cos(a)*d,ky=Math.sin(a)*d;knob.style.left=(50+kx/JR*50)+'%';knob.style.top=(50+ky/JR*50)+'%';joyv={x:dx,y:dy};S.running=false}
  function stepManual(dt){if(!joyActive)return;const a=Math.atan2(joyv.y,joyv.x);const sp=S.player.spd*(1+(S.player.buff.spd||0));S.player.x=clamp(S.player.x+Math.cos(a)*sp*dt,8,S.map.size.w-8);S.player.y=clamp(S.player.y+Math.sin(a)*sp*dt,8,S.map.size.h-8)}
  return{stepManual}
})();

// ---- Combat/Items/Skills ----
const Items=(()=>{const S=Game.S;const add=(id,qty,rare=false)=>{const it=S.inv.find(i=>i.id===id && (!!i.rare)===!!rare);if(it)it.qty+=qty;else S.inv.push({id,qty,rare});Game.save();UI.renderInv()};const use=id=>{const it=S.inv.find(i=>i.id===id && i.qty>0);if(!it)return;if(id==='red'){it.qty--;S.player.hp=Math.min(S.player.hpMax,S.player.hp+45)}if(id==='blue'){it.qty--;S.player.mp=Math.min(S.player.mpMax,S.player.mp+35)}if(it.qty<=0)S.inv=S.inv.filter(i=>i.qty>0);UI.updateHUD();UI.renderInv();Game.save()};return{add,use}})();
const Skills=(()=>{const S=Game.S;let cd={p:0,b:0,d:0,h:0,w:0};function power(){if(cd.p>0)return;cd.p=5*60;S.player.str+=4;setTimeout(()=>S.player.str-=4,2000);beep(980,100)}function buff(){if(cd.b>0)return;cd.b=22*60;S.player.buff={atk:0.25,spd:0.25,t:20*60};beep(720,100)}function dash(){if(cd.d>0)return;cd.d=12*60;S.player.spd+=1.2;setTimeout(()=>S.player.spd-=1.2,2000);beep(840,90)}function heal(){if(cd.h>0||S.player.mp<10)return;cd.h=10*60;S.player.mp-=10;S.player.hp=Math.min(S.player.hpMax,S.player.hp+30);UI.updateHUD();beep(520,100)}function whirl(){if(cd.w>0||S.player.mp<12)return;cd.w=10*60;S.player.mp-=12;let hit=0;for(const m of Game.S.mons){if(m.hp>0&&Math.hypot(S.player.x-m.x,S.player.y-m.y)<=38){const dmg=6+S.player.str+(S.player.buff.atk?S.player.str*S.player.buff.atk:0);m.hp=Math.max(0,m.hp-~~(dmg));hit++;if(m.hp<=0)Combat.onKill(m)}}if(hit)beep(460,90);UI.updateHUD()}function tick(){Object.keys(cd).forEach(k=>{if(cd[k]>0)cd[k]--});if(S.player.buff.t>0)S.player.buff.t--}return{power,buff,dash,heal,whirl,tick}})();
const Combat=(()=>{const S=Game.S;const dist=(a,b)=>Math.hypot(a.x-b.x,a.y-b.y);let target=null;function choose(){const p=S.player;const c=S.mons.filter(m=>m.hp>0&&dist(p,m)<=S.config.aggro);if(!c.length)return null;c.sort((a,b)=>dist(p,a)-dist(p,b));return c[0]}function attack(){if(!S.running||!target)return;const d=dist(S.player,target);if(d<=24&&target.hp>0){if(S.tick%18===0){if(Math.random()*100>(75+S.player.dex*3))return;const crit=Math.random()*100<=(S.player.crit||5);let dmg=~~(S.player.str+(S.player.buff.atk?S.player.str*S.player.buff.atk:0)+Math.random()*6);if(crit)dmg=~~(dmg*1.7);target.hp=Math.max(0,target.hp-dmg);if(target.hp<=0){onKill(target);target.respawn=~~((600+Math.random()*300)*S.rates.respawn);target=null}UI.updateHUD()}}}function onKill(m){S.kills++;S.player.exp+=m.exp;S.zeny+=m.z;if(Math.random()<(0.22*S.rates.drop)){const pool=['horn','hide','tooth','red','blue','gem'];const id=pool[~~(Math.random()*pool.length)];Items.add(id,1,id==='gem');S.loots++;UI.renderInv()}if(S.player.exp>=S.player.next){S.player.exp-=S.player.next;S.player.lv++;S.player.sp++;S.player.next=Math.round(S.player.next*1.25);S.player.hpMax+=12;S.player.hp=S.player.hpMax;S.player.str++;S.player.agi++;beep(1320,160)}Game.save()}function step(dt){S.tick++;if(!target||target.hp<=0){if(!(S.tick%20))target=choose()}attack()}return{onKill,step}})();

// ---- Loop & Init ----
let last=performance.now();
function loop(t){const dt=Math.min(33,t-last)/16.67;last=t;Controls.stepManual(dt);if(Game.S.running){ // follow route
  if(Game.S.route.length){const p=Game.S.player,wp=Game.S.route[0];const d=Math.hypot(wp.x-p.x,wp.y-p.y);if(d>6){const a=Math.atan2(wp.y-p.y,wp.x-p.x);const sp=p.spd*(1+(p.buff.spd||0));p.x+=Math.cos(a)*sp*dt;p.y+=Math.sin(a)*sp*dt}else Game.S.route.shift()}}
Skills.tick();Combat.step(dt);Systems.draw();UI.updateHUD();requestAnimationFrame(loop)}

function init(){UI.populate();UI.bind();Game.loadMap(Game.S.map.name);UI.renderInv();UI.updateHUD();requestAnimationFrame(loop)}

// Map image injection when user loads a file
Bus.on('texture',()=>Systems.draw());
init();
</script></body>
</html>
